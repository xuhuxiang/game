{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport axios from 'axios';\nimport router from \"@/router\";\n\n// 创建一个axios对象出来\nconst request = axios.create({\n  baseURL: \"http://114.55.219.66:8080\",\n  timeout: 5000\n});\n\n// request 拦截器\n// 可以自请求发送前对请求做一些处理\n// 比如统一加token，对请求参数统一加密\nrequest.interceptors.request.use(config => {\n  config.headers['Content-Type'] = 'application/json;charset=utf-8';\n  const token = localStorage.getItem(\"token\");\n  if (token) {\n    config.headers['token'] = token;\n  }\n\n  // config.headers['token'] = user.token;  // 设置请求头\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// response 拦截器\n// 可以在接口响应后统一处理结果\nrequest.interceptors.response.use(response => {\n  // response.data即为后端返回的Result\n  let res = response.data;\n  // 兼容服务端返回的字符串数据\n  if (typeof res === 'string') {\n    res = res ? JSON.parse(res) : res;\n  }\n  // 当权限验证不通过的时候跳转到登录页面\n  if (res.code === '401') {\n    router.push(\"/login\").catch(() => {});\n  }\n  return res;\n}, error => {\n  console.log('err' + error); // for debug\n  return Promise.reject(error);\n});\nexport default request;","map":{"version":3,"names":["axios","router","request","create","baseURL","timeout","interceptors","use","config","headers","token","localStorage","getItem","error","Promise","reject","response","res","data","JSON","parse","code","push","catch","console","log"],"sources":["C:/Users/XHX/Desktop/game1/src/utils/request.js"],"sourcesContent":["import axios from 'axios'\r\nimport router from \"@/router\";\r\n\r\n// 创建一个axios对象出来\r\nconst request = axios.create({\r\n    baseURL: \"http://114.55.219.66:8080\",\r\n    timeout: 5000\r\n})\r\n\r\n// request 拦截器\r\n// 可以自请求发送前对请求做一些处理\r\n// 比如统一加token，对请求参数统一加密\r\nrequest.interceptors.request.use(config => {\r\n    config.headers['Content-Type'] = 'application/json;charset=utf-8';\r\n\r\n    const token = localStorage.getItem(\"token\");\r\n    if (token) {\r\n        config.headers['token'] = token;\r\n    }\r\n\r\n    // config.headers['token'] = user.token;  // 设置请求头\r\n    return config\r\n}, error => {\r\n    return Promise.reject(error)\r\n});\r\n\r\n// response 拦截器\r\n// 可以在接口响应后统一处理结果\r\nrequest.interceptors.response.use(\r\n    response => {\r\n        // response.data即为后端返回的Result\r\n        let res = response.data;\r\n        // 兼容服务端返回的字符串数据\r\n        if (typeof res === 'string') {\r\n            res = res ? JSON.parse(res) : res\r\n        }\r\n        // 当权限验证不通过的时候跳转到登录页面\r\n        if (res.code === '401') {\r\n            router.push(\"/login\").catch(() => { })\r\n        }\r\n        return res;\r\n    },\r\n    error => {\r\n        console.log('err' + error) // for debug\r\n        return Promise.reject(error)\r\n    }\r\n)\r\n\r\n\r\nexport default request"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,MAAM,MAAM,UAAU;;AAE7B;AACA,MAAMC,OAAO,GAAGF,KAAK,CAACG,MAAM,CAAC;EACzBC,OAAO,EAAE,2BAA2B;EACpCC,OAAO,EAAE;AACb,CAAC,CAAC;;AAEF;AACA;AACA;AACAH,OAAO,CAACI,YAAY,CAACJ,OAAO,CAACK,GAAG,CAACC,MAAM,IAAI;EACvCA,MAAM,CAACC,OAAO,CAAC,cAAc,CAAC,GAAG,gCAAgC;EAEjE,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EAC3C,IAAIF,KAAK,EAAE;IACPF,MAAM,CAACC,OAAO,CAAC,OAAO,CAAC,GAAGC,KAAK;EACnC;;EAEA;EACA,OAAOF,MAAM;AACjB,CAAC,EAAEK,KAAK,IAAI;EACR,OAAOC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAChC,CAAC,CAAC;;AAEF;AACA;AACAX,OAAO,CAACI,YAAY,CAACU,QAAQ,CAACT,GAAG,CAC7BS,QAAQ,IAAI;EACR;EACA,IAAIC,GAAG,GAAGD,QAAQ,CAACE,IAAI;EACvB;EACA,IAAI,OAAOD,GAAG,KAAK,QAAQ,EAAE;IACzBA,GAAG,GAAGA,GAAG,GAAGE,IAAI,CAACC,KAAK,CAACH,GAAG,CAAC,GAAGA,GAAG;EACrC;EACA;EACA,IAAIA,GAAG,CAACI,IAAI,KAAK,KAAK,EAAE;IACpBpB,MAAM,CAACqB,IAAI,CAAC,QAAQ,CAAC,CAACC,KAAK,CAAC,MAAM,CAAE,CAAC,CAAC;EAC1C;EACA,OAAON,GAAG;AACd,CAAC,EACDJ,KAAK,IAAI;EACLW,OAAO,CAACC,GAAG,CAAC,KAAK,GAAGZ,KAAK,CAAC,EAAC;EAC3B,OAAOC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAChC,CACJ,CAAC;AAGD,eAAeX,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}