{"ast":null,"code":"\"use strict\";\n\nvar window = require(\"global/window\");\nvar isFunction = require(\"is-function\");\nvar parseHeaders = require(\"parse-headers\");\nvar xtend = require(\"xtend\");\nmodule.exports = createXHR;\ncreateXHR.XMLHttpRequest = window.XMLHttpRequest || noop;\ncreateXHR.XDomainRequest = \"withCredentials\" in new createXHR.XMLHttpRequest() ? createXHR.XMLHttpRequest : window.XDomainRequest;\nforEachArray([\"get\", \"put\", \"post\", \"patch\", \"head\", \"delete\"], function (method) {\n  createXHR[method === \"delete\" ? \"del\" : method] = function (uri, options, callback) {\n    options = initParams(uri, options, callback);\n    options.method = method.toUpperCase();\n    return _createXHR(options);\n  };\n});\nfunction forEachArray(array, iterator) {\n  for (var i = 0; i < array.length; i++) {\n    iterator(array[i]);\n  }\n}\nfunction isEmpty(obj) {\n  for (var i in obj) {\n    if (obj.hasOwnProperty(i)) return false;\n  }\n  return true;\n}\nfunction initParams(uri, options, callback) {\n  var params = uri;\n  if (isFunction(options)) {\n    callback = options;\n    if (typeof uri === \"string\") {\n      params = {\n        uri: uri\n      };\n    }\n  } else {\n    params = xtend(options, {\n      uri: uri\n    });\n  }\n  params.callback = callback;\n  return params;\n}\nfunction createXHR(uri, options, callback) {\n  options = initParams(uri, options, callback);\n  return _createXHR(options);\n}\nfunction _createXHR(options) {\n  if (typeof options.callback === \"undefined\") {\n    throw new Error(\"callback argument missing\");\n  }\n  var called = false;\n  var callback = function cbOnce(err, response, body) {\n    if (!called) {\n      called = true;\n      options.callback(err, response, body);\n    }\n  };\n  function readystatechange() {\n    if (xhr.readyState === 4) {\n      setTimeout(loadFunc, 0);\n    }\n  }\n  function getBody() {\n    // Chrome with requestType=blob throws errors arround when even testing access to responseText\n    var body = undefined;\n    if (xhr.response) {\n      body = xhr.response;\n    } else {\n      body = xhr.responseText || getXml(xhr);\n    }\n    if (isJson) {\n      try {\n        body = JSON.parse(body);\n      } catch (e) {}\n    }\n    return body;\n  }\n  function errorFunc(evt) {\n    clearTimeout(timeoutTimer);\n    if (!(evt instanceof Error)) {\n      evt = new Error(\"\" + (evt || \"Unknown XMLHttpRequest Error\"));\n    }\n    evt.statusCode = 0;\n    return callback(evt, failureResponse);\n  }\n\n  // will load the data & process the response in a special response object\n  function loadFunc() {\n    if (aborted) return;\n    var status;\n    clearTimeout(timeoutTimer);\n    if (options.useXDR && xhr.status === undefined) {\n      //IE8 CORS GET successful response doesn't have a status field, but body is fine\n      status = 200;\n    } else {\n      status = xhr.status === 1223 ? 204 : xhr.status;\n    }\n    var response = failureResponse;\n    var err = null;\n    if (status !== 0) {\n      response = {\n        body: getBody(),\n        statusCode: status,\n        method: method,\n        headers: {},\n        url: uri,\n        rawRequest: xhr\n      };\n      if (xhr.getAllResponseHeaders) {\n        //remember xhr can in fact be XDR for CORS in IE\n        response.headers = parseHeaders(xhr.getAllResponseHeaders());\n      }\n    } else {\n      err = new Error(\"Internal XMLHttpRequest Error\");\n    }\n    return callback(err, response, response.body);\n  }\n  var xhr = options.xhr || null;\n  if (!xhr) {\n    if (options.cors || options.useXDR) {\n      xhr = new createXHR.XDomainRequest();\n    } else {\n      xhr = new createXHR.XMLHttpRequest();\n    }\n  }\n  var key;\n  var aborted;\n  var uri = xhr.url = options.uri || options.url;\n  var method = xhr.method = options.method || \"GET\";\n  var body = options.body || options.data;\n  var headers = xhr.headers = options.headers || {};\n  var sync = !!options.sync;\n  var isJson = false;\n  var timeoutTimer;\n  var failureResponse = {\n    body: undefined,\n    headers: {},\n    statusCode: 0,\n    method: method,\n    url: uri,\n    rawRequest: xhr\n  };\n  if (\"json\" in options && options.json !== false) {\n    isJson = true;\n    headers[\"accept\"] || headers[\"Accept\"] || (headers[\"Accept\"] = \"application/json\"); //Don't override existing accept header declared by user\n    if (method !== \"GET\" && method !== \"HEAD\") {\n      headers[\"content-type\"] || headers[\"Content-Type\"] || (headers[\"Content-Type\"] = \"application/json\"); //Don't override existing accept header declared by user\n      body = JSON.stringify(options.json === true ? body : options.json);\n    }\n  }\n  xhr.onreadystatechange = readystatechange;\n  xhr.onload = loadFunc;\n  xhr.onerror = errorFunc;\n  // IE9 must have onprogress be set to a unique function.\n  xhr.onprogress = function () {\n    // IE must die\n  };\n  xhr.onabort = function () {\n    aborted = true;\n  };\n  xhr.ontimeout = errorFunc;\n  xhr.open(method, uri, !sync, options.username, options.password);\n  //has to be after open\n  if (!sync) {\n    xhr.withCredentials = !!options.withCredentials;\n  }\n  // Cannot set timeout with sync request\n  // not setting timeout on the xhr object, because of old webkits etc. not handling that correctly\n  // both npm's request and jquery 1.x use this kind of timeout, so this is being consistent\n  if (!sync && options.timeout > 0) {\n    timeoutTimer = setTimeout(function () {\n      if (aborted) return;\n      aborted = true; //IE9 may still call readystatechange\n      xhr.abort(\"timeout\");\n      var e = new Error(\"XMLHttpRequest timeout\");\n      e.code = \"ETIMEDOUT\";\n      errorFunc(e);\n    }, options.timeout);\n  }\n  if (xhr.setRequestHeader) {\n    for (key in headers) {\n      if (headers.hasOwnProperty(key)) {\n        xhr.setRequestHeader(key, headers[key]);\n      }\n    }\n  } else if (options.headers && !isEmpty(options.headers)) {\n    throw new Error(\"Headers cannot be set on an XDomainRequest object\");\n  }\n  if (\"responseType\" in options) {\n    xhr.responseType = options.responseType;\n  }\n  if (\"beforeSend\" in options && typeof options.beforeSend === \"function\") {\n    options.beforeSend(xhr);\n  }\n\n  // Microsoft Edge browser sends \"undefined\" when send is called with undefined value.\n  // XMLHttpRequest spec says to pass null as body to indicate no body\n  // See https://github.com/naugtur/xhr/issues/100.\n  xhr.send(body || null);\n  return xhr;\n}\nfunction getXml(xhr) {\n  if (xhr.responseType === \"document\") {\n    return xhr.responseXML;\n  }\n  var firefoxBugTakenEffect = xhr.responseXML && xhr.responseXML.documentElement.nodeName === \"parsererror\";\n  if (xhr.responseType === \"\" && !firefoxBugTakenEffect) {\n    return xhr.responseXML;\n  }\n  return null;\n}\nfunction noop() {}","map":{"version":3,"names":["window","require","isFunction","parseHeaders","xtend","module","exports","createXHR","XMLHttpRequest","noop","XDomainRequest","forEachArray","method","uri","options","callback","initParams","toUpperCase","_createXHR","array","iterator","i","length","isEmpty","obj","hasOwnProperty","params","Error","called","cbOnce","err","response","body","readystatechange","xhr","readyState","setTimeout","loadFunc","getBody","undefined","responseText","getXml","isJson","JSON","parse","e","errorFunc","evt","clearTimeout","timeoutTimer","statusCode","failureResponse","aborted","status","useXDR","headers","url","rawRequest","getAllResponseHeaders","cors","key","data","sync","json","stringify","onreadystatechange","onload","onerror","onprogress","onabort","ontimeout","open","username","password","withCredentials","timeout","abort","code","setRequestHeader","responseType","beforeSend","send","responseXML","firefoxBugTakenEffect","documentElement","nodeName"],"sources":["C:/Users/XHX/Desktop/game1/node_modules/xhr/index.js"],"sourcesContent":["\"use strict\";\nvar window = require(\"global/window\")\nvar isFunction = require(\"is-function\")\nvar parseHeaders = require(\"parse-headers\")\nvar xtend = require(\"xtend\")\n\nmodule.exports = createXHR\ncreateXHR.XMLHttpRequest = window.XMLHttpRequest || noop\ncreateXHR.XDomainRequest = \"withCredentials\" in (new createXHR.XMLHttpRequest()) ? createXHR.XMLHttpRequest : window.XDomainRequest\n\nforEachArray([\"get\", \"put\", \"post\", \"patch\", \"head\", \"delete\"], function(method) {\n    createXHR[method === \"delete\" ? \"del\" : method] = function(uri, options, callback) {\n        options = initParams(uri, options, callback)\n        options.method = method.toUpperCase()\n        return _createXHR(options)\n    }\n})\n\nfunction forEachArray(array, iterator) {\n    for (var i = 0; i < array.length; i++) {\n        iterator(array[i])\n    }\n}\n\nfunction isEmpty(obj){\n    for(var i in obj){\n        if(obj.hasOwnProperty(i)) return false\n    }\n    return true\n}\n\nfunction initParams(uri, options, callback) {\n    var params = uri\n\n    if (isFunction(options)) {\n        callback = options\n        if (typeof uri === \"string\") {\n            params = {uri:uri}\n        }\n    } else {\n        params = xtend(options, {uri: uri})\n    }\n\n    params.callback = callback\n    return params\n}\n\nfunction createXHR(uri, options, callback) {\n    options = initParams(uri, options, callback)\n    return _createXHR(options)\n}\n\nfunction _createXHR(options) {\n    if(typeof options.callback === \"undefined\"){\n        throw new Error(\"callback argument missing\")\n    }\n\n    var called = false\n    var callback = function cbOnce(err, response, body){\n        if(!called){\n            called = true\n            options.callback(err, response, body)\n        }\n    }\n\n    function readystatechange() {\n        if (xhr.readyState === 4) {\n            setTimeout(loadFunc, 0)\n        }\n    }\n\n    function getBody() {\n        // Chrome with requestType=blob throws errors arround when even testing access to responseText\n        var body = undefined\n\n        if (xhr.response) {\n            body = xhr.response\n        } else {\n            body = xhr.responseText || getXml(xhr)\n        }\n\n        if (isJson) {\n            try {\n                body = JSON.parse(body)\n            } catch (e) {}\n        }\n\n        return body\n    }\n\n    function errorFunc(evt) {\n        clearTimeout(timeoutTimer)\n        if(!(evt instanceof Error)){\n            evt = new Error(\"\" + (evt || \"Unknown XMLHttpRequest Error\") )\n        }\n        evt.statusCode = 0\n        return callback(evt, failureResponse)\n    }\n\n    // will load the data & process the response in a special response object\n    function loadFunc() {\n        if (aborted) return\n        var status\n        clearTimeout(timeoutTimer)\n        if(options.useXDR && xhr.status===undefined) {\n            //IE8 CORS GET successful response doesn't have a status field, but body is fine\n            status = 200\n        } else {\n            status = (xhr.status === 1223 ? 204 : xhr.status)\n        }\n        var response = failureResponse\n        var err = null\n\n        if (status !== 0){\n            response = {\n                body: getBody(),\n                statusCode: status,\n                method: method,\n                headers: {},\n                url: uri,\n                rawRequest: xhr\n            }\n            if(xhr.getAllResponseHeaders){ //remember xhr can in fact be XDR for CORS in IE\n                response.headers = parseHeaders(xhr.getAllResponseHeaders())\n            }\n        } else {\n            err = new Error(\"Internal XMLHttpRequest Error\")\n        }\n        return callback(err, response, response.body)\n    }\n\n    var xhr = options.xhr || null\n\n    if (!xhr) {\n        if (options.cors || options.useXDR) {\n            xhr = new createXHR.XDomainRequest()\n        }else{\n            xhr = new createXHR.XMLHttpRequest()\n        }\n    }\n\n    var key\n    var aborted\n    var uri = xhr.url = options.uri || options.url\n    var method = xhr.method = options.method || \"GET\"\n    var body = options.body || options.data\n    var headers = xhr.headers = options.headers || {}\n    var sync = !!options.sync\n    var isJson = false\n    var timeoutTimer\n    var failureResponse = {\n        body: undefined,\n        headers: {},\n        statusCode: 0,\n        method: method,\n        url: uri,\n        rawRequest: xhr\n    }\n\n    if (\"json\" in options && options.json !== false) {\n        isJson = true\n        headers[\"accept\"] || headers[\"Accept\"] || (headers[\"Accept\"] = \"application/json\") //Don't override existing accept header declared by user\n        if (method !== \"GET\" && method !== \"HEAD\") {\n            headers[\"content-type\"] || headers[\"Content-Type\"] || (headers[\"Content-Type\"] = \"application/json\") //Don't override existing accept header declared by user\n            body = JSON.stringify(options.json === true ? body : options.json)\n        }\n    }\n\n    xhr.onreadystatechange = readystatechange\n    xhr.onload = loadFunc\n    xhr.onerror = errorFunc\n    // IE9 must have onprogress be set to a unique function.\n    xhr.onprogress = function () {\n        // IE must die\n    }\n    xhr.onabort = function(){\n        aborted = true;\n    }\n    xhr.ontimeout = errorFunc\n    xhr.open(method, uri, !sync, options.username, options.password)\n    //has to be after open\n    if(!sync) {\n        xhr.withCredentials = !!options.withCredentials\n    }\n    // Cannot set timeout with sync request\n    // not setting timeout on the xhr object, because of old webkits etc. not handling that correctly\n    // both npm's request and jquery 1.x use this kind of timeout, so this is being consistent\n    if (!sync && options.timeout > 0 ) {\n        timeoutTimer = setTimeout(function(){\n            if (aborted) return\n            aborted = true//IE9 may still call readystatechange\n            xhr.abort(\"timeout\")\n            var e = new Error(\"XMLHttpRequest timeout\")\n            e.code = \"ETIMEDOUT\"\n            errorFunc(e)\n        }, options.timeout )\n    }\n\n    if (xhr.setRequestHeader) {\n        for(key in headers){\n            if(headers.hasOwnProperty(key)){\n                xhr.setRequestHeader(key, headers[key])\n            }\n        }\n    } else if (options.headers && !isEmpty(options.headers)) {\n        throw new Error(\"Headers cannot be set on an XDomainRequest object\")\n    }\n\n    if (\"responseType\" in options) {\n        xhr.responseType = options.responseType\n    }\n\n    if (\"beforeSend\" in options &&\n        typeof options.beforeSend === \"function\"\n    ) {\n        options.beforeSend(xhr)\n    }\n\n    // Microsoft Edge browser sends \"undefined\" when send is called with undefined value.\n    // XMLHttpRequest spec says to pass null as body to indicate no body\n    // See https://github.com/naugtur/xhr/issues/100.\n    xhr.send(body || null)\n\n    return xhr\n\n\n}\n\nfunction getXml(xhr) {\n    if (xhr.responseType === \"document\") {\n        return xhr.responseXML\n    }\n    var firefoxBugTakenEffect = xhr.responseXML && xhr.responseXML.documentElement.nodeName === \"parsererror\"\n    if (xhr.responseType === \"\" && !firefoxBugTakenEffect) {\n        return xhr.responseXML\n    }\n\n    return null\n}\n\nfunction noop() {}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}